// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE lg_users
  set is_active = true
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, activateUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO lg_users (
  id, name, email, password, avatar, is_active, created_at, groups
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, name, email, password, avatar, is_active, created_at, groups
`

type CreateUserParams struct {
	ID        uuid.UUID
	Name      string
	Email     string
	Password  string
	Avatar    sql.NullString
	IsActive  bool
	CreatedAt interface{}
	Groups    []string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (LgUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Avatar,
		arg.IsActive,
		arg.CreatedAt,
		pq.Array(arg.Groups),
	)
	var i LgUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.IsActive,
		&i.CreatedAt,
		pq.Array(&i.Groups),
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM lg_users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, avatar, is_active, created_at, groups FROM lg_users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (LgUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i LgUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.IsActive,
		&i.CreatedAt,
		pq.Array(&i.Groups),
	)
	return i, err
}

const inactivateUser = `-- name: InactivateUser :exec
UPDATE lg_users
  set is_active = false
WHERE id = $1
`

func (q *Queries) InactivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, inactivateUser, id)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password, avatar, is_active, created_at, groups FROM lg_users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]LgUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LgUser
	for rows.Next() {
		var i LgUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Avatar,
			&i.IsActive,
			&i.CreatedAt,
			pq.Array(&i.Groups),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE lg_users
  set name = $2,
  email = $3,
  avatar = $4,
  groups = $5
WHERE id = $1
RETURNING id, name, email, password, avatar, is_active, created_at, groups
`

type UpdateUserParams struct {
	ID     uuid.UUID
	Name   string
	Email  string
	Avatar sql.NullString
	Groups []string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (LgUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Avatar,
		pq.Array(arg.Groups),
	)
	var i LgUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.IsActive,
		&i.CreatedAt,
		pq.Array(&i.Groups),
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE lg_users
  set password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}
