// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: group.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO lg_groups (
  id, name, avatar, members
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, avatar, members, created_at
`

type CreateGroupParams struct {
	ID      uuid.UUID
	Name    string
	Avatar  sql.NullString
	Members json.RawMessage
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (LgGroup, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.ID,
		arg.Name,
		arg.Avatar,
		arg.Members,
	)
	var i LgGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Members,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM lg_groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, avatar, members, created_at FROM lg_groups
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id uuid.UUID) (LgGroup, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i LgGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Members,
		&i.CreatedAt,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, name, avatar, members, created_at FROM lg_groups
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListGroupsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]LgGroup, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LgGroup
	for rows.Next() {
		var i LgGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Avatar,
			&i.Members,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE lg_groups
  set name = $2,
  avatar = $3,
  members = $4
WHERE id = $1
RETURNING id, name, avatar, members, created_at
`

type UpdateGroupParams struct {
	ID      uuid.UUID
	Name    string
	Avatar  sql.NullString
	Members json.RawMessage
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (LgGroup, error) {
	row := q.db.QueryRowContext(ctx, updateGroup,
		arg.ID,
		arg.Name,
		arg.Avatar,
		arg.Members,
	)
	var i LgGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Members,
		&i.CreatedAt,
	)
	return i, err
}
